// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Reclaimer.Entities
{
    using Adjutant.Blam.Definitions;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DatabaseContext : System.Data.Entity.DbContext, IDatabaseContext
    {
        public System.Data.Entity.DbSet<CacheFile> CacheFiles { get; set; } // cache_file
        public System.Data.Entity.DbSet<StringIndex> StringIndexes { get; set; } // string_index
        public System.Data.Entity.DbSet<StringItem> StringItems { get; set; } // string_item
        public System.Data.Entity.DbSet<StringValue> StringValues { get; set; } // string_value
        public System.Data.Entity.DbSet<TagIndex> TagIndexes { get; set; } // tag_index
        public System.Data.Entity.DbSet<TagItem> TagItems { get; set; } // tag_item
        public System.Data.Entity.DbSet<TagPath> TagPaths { get; set; } // tag_path

        static DatabaseContext()
        {
            System.Data.Entity.Database.SetInitializer<DatabaseContext>(null);
        }

        public DatabaseContext()
            : base("Name=DatabaseContext")
        {
        }

        public DatabaseContext(string connectionString)
            : base(connectionString)
        {
        }

        public DatabaseContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public DatabaseContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public DatabaseContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CacheFileConfiguration());
            modelBuilder.Configurations.Add(new StringIndexConfiguration());
            modelBuilder.Configurations.Add(new StringItemConfiguration());
            modelBuilder.Configurations.Add(new StringValueConfiguration());
            modelBuilder.Configurations.Add(new TagIndexConfiguration());
            modelBuilder.Configurations.Add(new TagItemConfiguration());
            modelBuilder.Configurations.Add(new TagPathConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CacheFileConfiguration(schema));
            modelBuilder.Configurations.Add(new StringIndexConfiguration(schema));
            modelBuilder.Configurations.Add(new StringItemConfiguration(schema));
            modelBuilder.Configurations.Add(new StringValueConfiguration(schema));
            modelBuilder.Configurations.Add(new TagIndexConfiguration(schema));
            modelBuilder.Configurations.Add(new TagItemConfiguration(schema));
            modelBuilder.Configurations.Add(new TagPathConfiguration(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
