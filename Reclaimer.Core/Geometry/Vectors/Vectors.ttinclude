<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#

    var templateName = Path.GetFileName(this.Host.TemplateFile);
    
    void WriteGeneratedCodeNote()
    { #>
// This file was automatically generated via the '<#= templateName #>' T4 template.
// Do not modify this file directly - any changes will be lost when the code is regenerated.
<#  };

    void WriteGeneratedCodeAttribute()
    { #>
[System.CodeDom.Compiler.GeneratedCode("<#= templateName #>", "")]    
<#  };

    void WriteEqualityOperators(string typeName, params string[] compareProps)
    { #>
        #region Equality Operators

        public static bool operator ==(<#= typeName #> left, <#= typeName #> right) => <#= string.Join(" && ", compareProps.Select(s => $"left.{s} == right.{s}")) #>;
        public static bool operator !=(<#= typeName #> left, <#= typeName #> right) => !(left == right);

        public override bool Equals(object obj) => obj is <#= typeName #> other && Equals(other);
        public bool Equals(<#= typeName #> other) => <#= string.Join(" && ", compareProps.Select(s => $"{s} == other.{s}")) #>;
        public override int GetHashCode() => HashCode.Combine(<#= string.Join(", ", compareProps) #>);

        #endregion
<#  };

#>
<#+

    public class VectorDescription
    {
        public static readonly string[] FieldNames = new string[] { "x", "y", "z", "w" };
        public static readonly string[] PropertyNames = new string[] { "X", "Y", "Z", "W" };

        public string TypeName { get; }
        public string StorageType { get; }
        public string NumericsType { get; }
        public string InterfaceTypes { get; }
        public int[] Precision { get; }
        public int Dimensions { get; }
        public bool IsSigned { get; }
        public int ByteLength { get; }

        public int BitLength => ByteLength * 8;

        public VectorDescription(string name, int dimensions, byte precision)
            : this(name, dimensions, true)
        {
            StorageType = precision == 16 ? "Half" : precision == 64 ? "double" : "float";
            Precision = new int[dimensions];
            ByteLength = dimensions * precision / 8;

            for (var i = 0; i < dimensions; i++)
                Precision[i] = precision;
        }

        public VectorDescription(string name, int dimensions, bool signed, int[] packLayout)
            : this(name, dimensions, signed)
        {
            StorageType = "uint";
            Precision = packLayout;
            ByteLength = 4;
        }

        private VectorDescription(string name, int dimensions, bool signed)
        {
            TypeName = name;
            Dimensions = dimensions;
            IsSigned = signed;

            NumericsType = $"Vector{dimensions}";
            InterfaceTypes = $"IVector{dimensions}, IReadOnlyVector{dimensions}";
        }
    }

#>
